<?xml version="1.0" encoding="UTF-8"?>
<project name="XinkVpnTest" default="help">
    
    <!-- The local.properties file is created and updated by the 'android'
     tool.
     It contains the path to the SDK. It should *NOT* be checked into
     Version Control Systems. -->
    <property file="local.properties" />
    
    <!-- The build.properties file can be created by you and is never touched
     by the 'android' tool. This is the place to change some of the
     default property values used by the Ant rules.
     Here are some properties you may want to change/update:
     
     source.dir
     The name of the source directory. Default is 'src'.
     out.dir
     The name of the output directory. Default is 'bin'.
     
     Properties related to the SDK location or the project target should
     be updated using the 'android' tool with the 'update' action.
     
     This file is an integral part of the build system for your
     application and should be checked into Version Control Systems.
     
     -->
    <property file="build.properties" />
    
    <!-- The default.properties file is created and updated by the 'android'
     tool, as well as ADT.
     This file is an integral part of the build system for your
     application and should be checked into Version Control Systems. -->
    <property file="default.properties" />
    
    
    <!-- Required pre-setup import -->
    <import file="${sdk.dir}/tools/ant/pre_setup.xml" />
    
    
    <!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
    <target name="-pre-compile">
        <!-- run once, install JDTCompiler as ant lib
         <copy todir="${ant.library.dir}">
         <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
         </copy>
         <unzip dest="${ant.library.dir}">
         <patternset includes="jdtCompilerAdapter.jar"/>
         <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
         </unzip> -->
        
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
    </target>
    <!--
     <target name="-pre-build">
     </target>
     <target name="-pre-compile">
     </target>
     
     [This is typically used for code obfuscation.
     Compiled code location: ${out.classes.absolute.dir}
     If this is not done in place, override ${out.dex.input.absolute.dir}]
     <target name="-post-compile">
     </target>
     -->
    
    <!-- Execute the Android Setup task that will setup some properties
     specific to the target, and import the build rules files.
     
     The rules file is imported from
     <SDK>/tools/ant/
     Depending on the project type it can be either:
     - main_rules.xml
     - lib_rules.xml
     - test_rules.xml
     
     To customize existing targets, there are two options:
     - Customize only one target:
     - copy/paste the target into this file, *before* the
     <setup> task.
     - customize it to your needs.
     - Customize the whole script.
     - copy/paste the content of the rules files (minus the top node)
     into this file, *after* the <setup> task
     - disable the import of the rules by changing the setup task
     below to <setup import="false" />.
     - customize to your needs.
     -->
    <setup />
  
    <target name="coverage" depends="-set-coverage-classpath, -install-instrumented, install" description="Runs the tests against the instrumented code and generates code coverage report">
        <delete dir="coverage" />
        <mkdir dir="coverage"/>
        
        <run-tests-helper emma.enabled="true">
             <extra-instrument-args>
                 <arg value="-e" />
                    <arg value="coverageFile" />
                    <arg value="${emma.dump.file}" />
             </extra-instrument-args>
         </run-tests-helper>
         <echo>Downloading coverage file into project directory...</echo>
         <exec executable="${adb}" failonerror="true">
             <arg line="${adb.device.arg}" />
             <arg value="pull" />
             <arg value="${emma.dump.file}" />
             <arg value="coverage.ec" />
         </exec>
         <echo>Extracting coverage report...</echo>
         <emma>
             <report sourcepath="${tested.project.absolute.dir}/${source.dir}" verbosity="${verbosity}">
                 <!-- TODO: report.dir or something like should be introduced if necessary -->
                 <infileset dir=".">
                     <include name="coverage.ec" />
                     <include name="coverage.em" />
                 </infileset>
                 <!-- TODO: reports in other, indicated by user formats -->
                 <xml outfile="coverage/coverage.xml" />
            </report>
         </emma>
         <echo>Cleaning up temporary files...</echo>
         <delete dir="${instrumentation.absolute.dir}" />
         <delete file="coverage.ec" />
         <delete file="coverage.em" />
         <echo>Saving the report file in ${basedir}/coverage/coverage.xml</echo>
    </target>
    
</project>
